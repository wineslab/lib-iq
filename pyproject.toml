[build-system]

# 'requires' is a mandatory field that specifies a list of Python packages required to build your project from source.
# These packages will be installed in an isolated environment before your build backend is invoked.
requires = [
  "setuptools", # A Python package that provides a lot of code needed to help package Python libraries.
  "wheel",      # A built-package format for Python which provides the bdist_wheel setuptools extension.
  "ninja",      # A small build system with a focus on speed, used here likely in conjunction with cmake.
  "cmake >= 3.17.0",      # An open-source, cross-platform family of tools designed to build, test and package software.
  "build",      # A PEP 517 compliant Python build system.
  "pytest",     # A testing framework for Python that allows you to easily create small, simple tests, yet scales to support complex functional testing.
  "pybind11",
  "sigmf",
  "scipy",
  "tqdm",
  "matplotlib",
]

# 'build-backend' is an optional field that specifies the build backend that should be used to build the project.
# If not specified, the default backend is "setuptools.build_meta:__legacy__".
# In this case, the build backend is "setuptools.build_meta", which is the modern setuptools backend.
build-backend = "setuptools.build_meta"





[tool.mypy]

# specifies which files mypy should type check.
files = "setup.py"

# 'python_version' specifies the Python version for type checking.
python_version = "3.9.18"

# 'strict' is a flag that enables all optional strictness flags. When set to true, mypy will check your code more strictly.
strict = true

# is a flag that controls whether mypy should show error codes in error messages. When set to true, mypy will show error codes.
show_error_codes = true

# 'enable_error_code' is a list of error codes that should be enabled.
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

# 'warn_unreachable' is a flag that controls whether mypy should warn about unreachable code. When set to true, mypy will warn about unreachable code.
warn_unreachable = true





[[tool.mypy.overrides]]

# 'module' is a list of modules that the override should apply to.
module = ["ninja"]

# 'ignore_missing_imports' is a flag that controls whether mypy should ignore missing imports. When set to true, mypy will ignore missing imports.
ignore_missing_imports = true





[tool.pytest.ini_options]

# 'minversion' specifies the minimum version of pytest that is required.
minversion = "8.0.1"

# 'addopts' is a list of command-line options to add to the pytest command.
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]

# 'xfail_strict' is a flag that controls whether xfail-marked tests should be reported as failures if they pass. When set to true, xfail-marked tests will be reported as failures if they pass.
xfail_strict = true

# 'filterwarnings' is a list of warning filters. Each filter determines whether to ignore or error on certain types of warnings. Here, it's set to error on all warnings, but ignore certain deprecation warnings from pytest.
filterwarnings = [
    "error",
    "ignore:(ast.Str|Attribute s|ast.NameConstant|ast.Num) is deprecated:DeprecationWarning:_pytest",
]

# 'testpaths' is a list of directories to search for tests.
testpaths = ["tests"]





[tool.cibuildwheel]

# 'test-command' specifies the command to run your tests. Here, it's set to "pytest {project}/tests", which will run pytest on the tests in your project.
test-command = "pytest {project}/tests"

# 'test-extras' is a list of extras_require to install when testing the wheels.
test-extras = ["test"]

# 'test-skip' is a list of build selectors for which tests should be skipped.
test-skip = ["*universal2:arm64"]

# 'before-build' specifies a shell command to run before building each wheel. Here, it's set to "rm -rf {project}/build", which will delete the build directory before each build.
# This is done to avoid a bug with setuptools that causes a collision between pypy and cpython artifacts.
before-build = "rm -rf {project}/build"





[tool.ruff]

# 'extend-select' is a list of error codes that ruff should select for checking.
extend-select = [
  "B",    # flake8-bugbear
  "B904",
  "I",    # isort
  "PGH",  # pygrep-hooks
  "RUF",  # Ruff-specific
  "UP",   # pyupgrade
]

# 'extend-ignore' is a list of error codes that ruff should ignore.
extend-ignore = [
  "E501",   # Line too long
]

# 'target-version' specifies the Python version for checking.
target-version = "py312"